/**********************************************************************
 Java CUP specification for a parser for cimple programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) 
 *
 * NOTE: You will need to make changes here.
 */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal LinkedList	      varDeclList;
non terminal VarDeclNode      varDecl;
non terminal FnDeclNode	      fnDecl;
non terminal StructDeclNode   structDecl;
non terminal LinkedList	      structBody;
non terminal FormalsListNode  formals;
non terminal LinkedList	      formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList	      stmtList;
non terminal StmtNode	      stmt;	      
non terminal TypeNode         type;
non terminal IdNode           id;

 
/* NOTE: Add precedence and associativity declarations here */


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                ;

varDeclList	::= varDeclList:vl varDecl:v
		{: vl.addLast(v);
		   RESULT = vl;
		:}
		| /* epsilon */
		{: RESULT = new LinkedList<VarDeclNode>();
		:}
		;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                ;

fnDecl		::= type:t id:i formals:f fnBody:fb
		{: RESULT = new FnDeclNode(t, i, f, fb);
		:}
		;

structDecl	::= STRUCT id:i LCURLY structBody:sb RCURLY SEMICOLON
		{: DeclListNode dl = new DeclListNode(sb);
		   RESULT = new StructDeclNode(i, dl);
		:}
		;

structBody	::= structBody:sb varDecl:v
		{: sb.addLast(v);
		   RESULT = sb;
		:}
		| varDecl:v
		{: LinkedList<VarDeclNode> vl = new LinkedList<VarDeclNode>();
		   vl.addLast(v);
		   RESULT = vl;
		:}
		;

formals		::= LPAREN RPAREN
		{: LinkedList<FormalDeclNode> fl = new LinkedList<FormalDeclNode>();
		   RESULT = new FormalsListNode(fl);
		:}
		| LPAREN formalsList:fl RPAREN
		{: RESULT = new FormalsListNode(fl);
		:}
		;

formalsList	::= formalDecl:fd
		{: LinkedList<FormalDeclNode> fl = new LinkedList<FormalDeclNode>();
		   fl.addLast(fd);
		   RESULT = fl;
		:}
		| formalDecl:fd COMMA formalsList:fl
		{: fl.addFirst(fd);
		   RESULT = fl;
		:}
		;

formalDecl	::= type:t id:i
		{: RESULT = new FormalDeclNode(t, i);
		:}
		;

fnBody		::= LCURLY varDeclList:vl stmtList:sl RCURLY
		{: DeclListNode dn = new DeclListNode(vl);
		   StmtListNode sn = new StmtListNode(sl);
		   RESULT = new FnBodyNode(dn, sn);
		:}
		;

stmtList        ::= stmtList:sl stmt:s
		{: sl.addLast(s);
		   RESULT = sl;
		:}
                | /* epsilon */
		{: RESULT = new LinkedList<StmtNode>();
		:}
                ;

stmt		::=
		{:
		:}
		;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
		{: RESULT = new BoolNode();
		:}
		| VOID
		{: RESULT = new VoidNode();
		:}
		| STRUCT id:i
		{: RESULT = new StructNode(i);
		:}
		;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
			
	
