# Tests comments
// Tests global variable declarations
int abc1;
int abc2;
bool def1;
bool def2;
// Tests struct declarations
struct ghi1 { int z1; bool z2; };
struct ghi2 { int e; bool f; int g; bool h; };
struct ghi3 ghi4;
// Test function declaration
void test1() {}
// Test function declaration with a parameter
void test2(int one) {}
// Test function declaration with multiple parameters
void test3(int one, int two, bool three, bool four){}
// Test function declaration with body
int test4() {
    int x;
    x = 4;
    return x;
}
// Test function declaration with parameters and integer functions
int test5(int x, int i) {
    int y;
    int z;
    y = 1;
    z = 2;
    x++;
    x--;
    x = 4 + 4;
    x = 4 * 4;
    x = 4 - 4;
    x = 4 / 4;
    x = y;
    x = x + y * z - 2 * 4;
    x = (x + y) * ((z - 2) - (2 * 4));
    return i;
}
// Tests function with bool functions
bool test6(bool x, bool y) {
    bool z;
    z = true;
    z = false;
    z = x || y;
    z = x && y;
    z = x && y || z;
    z = !x;
    z = !x || y;
    z = !(x || (y && z));
    return z;
}
// Tests function with comparisons
bool test7(int x, int y, int z) {
    bool a;
    a = x > y;
    a = x < y;
    a = x >= y;
    a = x <= y;
    a = x == y;
    a = x != y;
    a = x + 1 == y * 2;
    a = x > y && x > z || y < z;
    a = !(x + 2 > 0 || y <= z* 4 && z < 2 + 2);
    return a;
}

int main() { 
    int a;
    bool b;
    a = 1 + 2 * 3 * ( 3 - 1 );
    b = false || true;
    x = 1; 
    y = true; 
    if (y) { 
        return; 
    } 
    if (!b) {
        int c;
        bool d;
        c = 3;
        d = true && false;
        if (b) {
            while (d) {
                c++;
            }
            return c + 1;
        }
        else {
            return c - 1;
        }
    }
}
void func1() { 
    int i; 
    i = 6*7 + (5-2) * 8; 
    i++; 
}
int func2() {
    bool j; 
    j = !(5>2); 
    j--;
}
bool func3() {
    int k; 
    cin >> k;
} 
void func4(int l) {
    cout << l;
}
void func5(int l) {
    if (l >= 6) {
        return true;
    }
}
int func6(int l) {
    if (l <= 6) {
        return;
    }
}
bool func7(bool m,int n,int o) {
    if (n<o) {
        func6(o);
    }
    else {
        func6(n);
    }
    return 5*10;
}
void func8(int j, bool k, int l, bool m) {
    while ((k||m)&&true) {
        bool x; 
        x = 7 != 7; 
    }
    return 6/7;
}


int a;
int b; //tests var decl
bool c;
bool d;
struct s s;
struct ids { int e; bool f; int g; bool h; }; //tests stucts

void func1() { int i; intj; i = 6*7 + (-2) * 8; i++; } //tests -- and multiple var decl's

int func2() {bool j; j = !(5>2); j--;} //tests ++ 

bool func3() {int k; }

void func4(int l) {  cout << l; cin >> k; } //tests cout/cin

void func5(int l) {if(l >= 6){return true;}} //tests if statements

int func6(int l) {if(l <= 6){return;}}

bool func7(bool m,int n,int o){if(n<o){func6(o);}else{func3(); return;}return 5*10;} //tests func calls and return

void func8(int j, bool k, int l, bool m){while((k||m)&&true){bool x; x = 7 != 7; }return 6/7;}//tests while statements

int func9(int s,bool t){t = !((7 + x - 5 * 4 / 2) == true) && (7 <=5 )||(7 != 7)||(7 <5 )||(7 >=5 )||(7 >5 );} //test almost all expr's

bool func10(bool b){int x; x = b.c.v;} //tests loc

bool func11(bool b){int x; x = "hello" + "string"; } //tests strings

bool func11(bool b){int x; while(true || false && true){if(true){if(false){while(true){}}}}}//tests nested statements
